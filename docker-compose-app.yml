version: '3.8'

services:
  app-backend:
    container_name: app-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3333:3333"
    environment:
      - FLASK_APP=run.py
      - FLASK_ENV=development
      - POSTGRES_USER=hackatum
      - POSTGRES_PASSWORD=hackatum2024
      - POSTGRES_DB=hackatum
      - DATABASE_URL=postgresql://hackatum:hackatum2024@app-postgres:5433/hackatum
    volumes:
      - ./backend:/app
    networks:
      - app-network
      - simulation
    depends_on:
      - app-postgres

  app-solver:
    container_name: app-solver
    build:
      context: ./solver
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./solver:/app
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - app-network

  app-grafana:
    container_name: app-grafana
    image: grafana/grafana:latest
    user: root
    ports:
      - "3001:3000"
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_PANELS_DISABLE_SANITIZE_HTML=true
    networks:
      - app-network

  app-postgres:
    container_name: app-postgres
    image: postgres:16
    environment:
      - POSTGRES_USER=hackatum
      - POSTGRES_PASSWORD=hackatum2024
      - POSTGRES_DB=hackatum
      - POSTGRES_PORT=5433
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5433"
    command: -p 5433
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
  simulation:
    driver: bridge

volumes:
  postgres_data:
